@model mct_timer.Models.User

@{
    ViewData["Title"] = "Settings";
}

<div id="gbmainbg">
    <div id="menu" class="menu">
        <img class="option" src="~/icons/door.png" title="logout" onclick="javascript:location.href = '/logout'" />
        <img class="option" src="~/icons/home-w.png" title="back to home" onclick="javascript:location.href = '/'" />
        <img class="option" src="~/icons/gear-w.png" title="settings" onclick="javascript:location.href='/sets'" />
        <img class="option" src="~/icons/info-w.png" title="info" onclick="javascript:location.href='/info'" />
    </div>
    <div id="loc" class="location">
        <img class="option" src="~/icons/location-w.png" title="image info" />
    </div>
    <div id="location-info">
        Turkey, Caldam 
    </div>


        <div class="form" id="defaultbg">
            <h1>@ViewData["Title"]</h1>
            <span class="info">
               You can provide up to 5 customized backgrounds in each category.               
            </span>

            <div id="valErrors" class="error">@TempData["Error"]</div>


        @if (ViewData["isUplodaQuote"] != null && (bool)ViewData["isUplodaQuote"])
            @await Html.PartialAsync("PartialUploadBG", new Background())


            @await Html.PartialAsync("PartialBGList", Model.Backgrounds)
            
        </div>
</div>




@section Scripts
{
    <script type="text/javascript" src="~/js/settings.js" asp-append-version="true"></script>

    <script>

        if (@ViewData["isUplodaQuote"].ToString().ToLower()) {
            var upld = new CustomBg(
                document.querySelector("#defaultbg")
            );
        }

        function getCookie(name) {
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length == 2) return parts.pop().split(";").shift();
        }

        async function AJAXSubmit(oFormElement) {

            upld.StartProgressBar();

            const formData = new FormData(oFormElement);
            var status;
            const response = await fetch(oFormElement.action, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': getCookie('RequestVerificationToken')
                },
                body: formData
            }).then(
                response => {
                    status = response.status;
                    return response.json();
                }).then(errors => {

                    switch (status) {
                        case 201:
                        case 200:
                            upld.OnFileUploaded();
                            break;
                        case 400:
                            upld.ShowValidaitonError(errors.File[0]);
                            break;
                        default:
                            upld.ShowValidaitonError("There is a problem with your file:" + errors.File[0]);
                            break;
                    }
                });

            upld.StopProgressBar();
        }

        function menuUpdate() {
            outOfScrollPosition(document.querySelector("#gbmainbg"), document.querySelector("#menu"));
            outOfScrollPosition(document.querySelector("#gbmainbg"), document.querySelector("#loc"));
        }



        function submitForm(formObj,objInfo) {

            if (objInfo && objInfo.value) {
                formObj.submit();
            } else {
                document.querySelector("#valErrors").innerHTML = "Please provide information in required fields";
            }
        }

        $(document).ready(function () {
            document.querySelector("#gbmainbg").style.backgroundImage = "url(/bg-lib/settings.jpg)";

            menuUpdate();

            if (upld)
                upld.refreshIcons(0);

            const bglist = new BgList(
                document.querySelector("#bgList")
            );
        })

        $(window).resize(() => menuUpdate());


    </script>
}